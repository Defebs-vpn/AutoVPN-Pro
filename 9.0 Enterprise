#!/bin/bash
# Auto Script Install VPN - Full Service
# Created by: Defebs-vpn
# Created on: 2025-02-17 19:47:57
# Version: 9.0 Enterprise

# Installation Directory
INSTALL_DIR="/etc/AutoVPN-Pro"
DOMAIN="sc.defebs-vpn.my.id"
MYIP=$(curl -sS ipv4.icanhazip.com)
UUID1=$(cat /proc/sys/kernel/random/uuid)

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Banner
clear
echo -e "${BLUE}╔═════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║        AUTO SCRIPT INSTALL VPN             ║${NC}"
echo -e "${BLUE}║     SSH WS - XRAY - MULTI PROTOCOL        ║${NC}"
echo -e "${BLUE}╚═════════════════════════════════════════════╝${NC}"
echo -e "${YELLOW}Created by${NC}: Defebs-vpn"
echo -e "${YELLOW}Version${NC}   : 9.0 Enterprise"
echo -e "${YELLOW}Date${NC}      : 2025-02-17 19:47:57"

# Check Root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}This script must be run as root${NC}"
    exit 1
fi

# Initial Setup
initial_setup() {
    # Update System
    apt update
    apt upgrade -y
    apt install -y wget curl jq unzip git

    # Set Timezone
    timedatectl set-timezone Asia/Jakarta

    # Install Required Packages
    apt install -y \
        apache2 php php-mysql mariadb-server \
        nginx certbot python3-certbot-nginx \
        fail2ban net-tools vnstat \
        build-essential nodejs npm \
        iptables-persistent netfilter-persistent \
        speedtest-cli neofetch htop

    # Enable and start services
    systemctl enable apache2
    systemctl enable nginx
    systemctl enable mariadb
    systemctl enable fail2ban

    # Create Installation Directory
    mkdir -p ${INSTALL_DIR}/{conf,cert,xray,ssh,backup}
}

# Domain Setup
setup_domain() {
    echo -e "\n${CYAN}[INFO]${NC} Setting up domain..."
    
    # Ask for domain
    read -p "Enter your domain: " DOMAIN
    
    # Update DNS A record
    echo -e "${YELLOW}Please ensure your domain's A record points to: ${MYIP}${NC}"
    echo -e "${YELLOW}Press enter when ready...${NC}"
    read
    
    # Install SSL Certificate
    certbot --nginx -d $DOMAIN --non-interactive --agree-tos --email dedefebriansyah402@gmail.com \
        --redirect --hsts --staple-ocsp
    
    # Create SSL Directory
    mkdir -p /etc/ssl/$DOMAIN
    cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/ssl/$DOMAIN/
    cp /etc/letsencrypt/live/$DOMAIN/privkey.pem /etc/ssl/$DOMAIN/
}

# Install SSH WebSocket
setup_ssh_ws() {
    echo -e "\n${CYAN}[INFO]${NC} Setting up SSH WebSocket..."
    
    # Configure SSH
    cat > /etc/ssh/sshd_config << END
Port 22
Port 2222
AddressFamily inet
ListenAddress 0.0.0.0
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxAuthTries 3
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/ssh/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
END

    # Create SSH Banner
    cat > /etc/ssh/banner << END
═══════════════════════════════════════════
          PREMIUM SSH SERVICE
        Created by: Defebs-vpn
═══════════════════════════════════════════
END

    # Setup WebSocket
    cat > /etc/nginx/conf.d/ws.conf << END
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN};
    
    location / {
        proxy_pass http://127.0.0.1:2082;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$http_host;
    }
}
END

    # Create WebSocket Service
    cat > /usr/local/bin/ws-service << END
#!/usr/bin/python3
import socket, threading, _thread, select, signal, sys, time
LISTENING_PORT = 2082
LISTENING_ADDR = '0.0.0.0'
PASS = ''

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue

                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()

    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            self.threads.remove(conn)
        finally:
            self.threadsLock.release()

class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Connection: ' + str(addr)

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')

            if hostPort == '':
                hostPort = DEFAULT_HOST

            split = self.findHeader(self.client_buffer, 'X-Split')

            if split != '':
                self.client.recv(BUFLEN)

            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
                elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                print('- No X-Real-Host!')
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')

        except Exception as e:
            self.log += ' - error: ' + str(e)
            self.server.printLog(self.log)
            pass
        finally:
            self.close()
            self.server.removeConn(self)

def main():
    print("\n:-------PythonProxy-------:\n")
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print('\nStopping...')
            server.close()
            break

if __name__ == '__main__':
    main()
END
    chmod +x /usr/local/bin/ws-service

    # Create Service
    cat > /etc/systemd/system/ws-service.service << END
[Unit]
Description=SSH WebSocket Service
Documentation=https://defebs-vpn.com
After=network.target nss-lookup.target

[Service]
Type=simple
User=root
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/bin/python3 /usr/local/bin/ws-service
Restart=on-failure

[Install]
WantedBy=multi-user.target
END

    systemctl daemon-reload
    systemctl enable ws-service
    systemctl restart ws-service
}

# Saya akan lanjutkan dengan instalasi X-Ray dan konfigurasi lainnya di respons berikutnya. Apakah Anda ingin saya lanjutkan?
